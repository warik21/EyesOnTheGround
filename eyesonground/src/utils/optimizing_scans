import pandas as pd
import numpy as np
from utils.observatory import Observatory
from utils.scan import ScanningArea
import cv2
from glob import glob
from tqdm import tqdm

class define_scan():
    """
    This class takes in an observatory(or several observatories) and a scanning area and finds the optimal scan
    in terms of speed and amount of pixels covered.
    Each pixel is also given a score based on how confident we are on its coverage.
    """
    def __init__(self, observatory: Observatory, scan_area: ScanningArea):
        # TODO: make it scalable for several observatories
        self.observatory = observatory
        self.x_min = scan_area.latitude_bounds[0]
        self.x_max = scan_area.latitude_bounds[1]
        self.y_min = scan_area.longitude_bounds[0]
        self.y_max = scan_area.longitude_bounds[1]

    def create_scan(self):
        """
        This function creates a scan from the observatory's position and the scanning area.
        :return: A scan object
        """
        # Define the scanning area
        self.scan_area = ScanningArea((self.x_max, self.y_max), (self.x_min, self.y_min))
        
        fov = self.observatory.get_fov()

        return None
    
