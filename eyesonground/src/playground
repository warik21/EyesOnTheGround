import rasterio
from rasterio.transform import from_origin
import numpy as np
import pyproj
from utils.utils import *
from geopy.distance import great_circle
from utils.observatory import Observatory
from utils.scan import ScanningArea
from utils.utils import *

image_path = r'C:/Users/eriki/OneDrive/Documents/all_folder/other_projects/images_and_reults/eilat_updated.tif'
transform_matrix, resolution = get_transform_matrix(image_path)
transform_matrix = affine_to_array(transform_matrix)  # Convert pixels to geo
inv_transform_matrix = inv_transform_matrix = find_inverse_transform(transform_matrix)  # Convert geo to pixels

# Define the location of the observatory
third_point_coords = 29.552339, 34.956392  #top left (lat, lon)
third_point_pixels = 12659, 4263  #bottom left (x, y)
observatory = Observatory(latitude=third_point_coords[0], longitude=third_point_coords[1], height=50)

# Define the scanning area
top_right = 29.548411, 34.974032
bottom_left = 29.540247, 34.952230
scanning_area = ScanningArea(top_right, bottom_left)

# Find the FOV on the ground
scanning_area.get_pixel_corners(inv_transform_matrix)
observatory_pixels = observatory.get_pixel_location()

scanning_area_top_right_pixels = scanning_area.top_right_corner_pixels

pixel_distance = np.sqrt((scanning_area_top_right_pixels[1]-observatory_pixels[1])**2 + (scanning_area_top_right_pixels[0]-observatory_pixels[0])**2)  # Euclidean distance
# pixel_distance = calculate_pixel_distance(real_world_distance, resolution)
observatory.distance_maximal = pixel_distance
distance_minimal = observatory.calc_min_distance()

observatory.start_angle = calculate_angle(observatory_pixels, scanning_area_top_right_pixels)
observatory.end_angle = observatory.start_angle + observatory.fov_horizontal

fov = observatory.get_fov()

print('Done')