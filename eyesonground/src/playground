import rasterio
from rasterio.transform import from_origin
import numpy as np
import cv2
from utils.utils import *
from utils.observatory import Observatory, load_and_prepare_observatory
from utils.scan import ScanningArea, load_and_prepare_scanning_area
from utils.utils import *


image_path = r'C:/Users/eriki/OneDrive/Documents/all_folder/other_projects/images_and_reults/eilat_updated.tif'
observatory_json = r'C:/Users/eriki/OneDrive/Documents/all_folder/other_projects/eriktron/eyesonground/src/cfg_files/known_points/third_point.json'
scanning_area_json = r'C:/Users/eriki/OneDrive/Documents/all_folder/other_projects/eriktron/eyesonground/src/cfg_files/scan_areas/scanning_area1.json'
output_video_path = r'C:/Users/eriki/OneDrive/Documents/all_folder/other_projects/images_and_reults/vid.mp4'

transform_matrix, resolution = get_transform_matrix(image_path)
inv_transform_matrix = find_inverse_transform(affine_to_array(transform_matrix))
observatory = load_and_prepare_observatory(observatory_json, tif_image_path=image_path)
scanning_area = load_and_prepare_scanning_area(scanning_area_json, inv_transform_matrix)

# Load base image and draw scanning area
base_image = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)
base_image = scanning_area.draw(base_image, color=(0, 0, 255), thickness=10)


top_right_pixels = scanning_area.top_right_corner_pixels
pixel_distance = np.linalg.norm(np.array(top_right_pixels) - np.array(observatory.pixels))
observatory.distance_maximal = pixel_distance
observatory.calc_min_distance()  # Assuming this updates some internal state
observatory.start_angle = calculate_angle(observatory.pixels, top_right_pixels)
observatory.end_angle = observatory.start_angle + observatory.fov_horizontal
fov = observatory.get_fov()
fov.get_middle()

# setup_fov(observatory, scanning_area)
num_frames = 100
# draw_moving_fov(base_image, observatory, scanning_area, num_frames, output_video_path)

print('Done')