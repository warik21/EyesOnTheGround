
# Generated by CodiumAI

import pytest

class TestObservatory:

    # Initialize an observatory object with valid arguments.
    def test_initialize_with_valid_arguments(self):
        observatory = Observatory(latitude=16266, longitude=6046, distance_minimal=100, distance_maximal=1000,
                                  start_angle=0, end_angle=180, fov_horizontal=90, fov_vertical=60, height=10,
                                  color=(255, 0, 0), thickness=2)
    
        assert observatory.latitude == 16266
        assert observatory.longitude == 6046
        assert observatory.distance_minimal == 100
        assert observatory.distance_maximal == 1000
        assert observatory.start_angle == 0
        assert observatory.end_angle == 180
        assert observatory.fov_horizontal == 90
        assert observatory.fov_vertical == 60
        assert observatory.height == 10
        assert observatory.color == (255, 0, 0)
        assert observatory.thickness == 2

    # Call calc_min_distance() with valid arguments.
    def test_calc_min_distance_with_valid_arguments(self):
        observatory = Observatory(latitude=16266, longitude=6046, distance_minimal=100, distance_maximal=1000,
                                  start_angle=0, end_angle=180, fov_horizontal=90, fov_vertical=60, height=10,
                                  color=(255, 0, 0), thickness=2)
    
        min_distance = observatory.calc_min_distance()
    
        assert min_distance == pytest.approx(9.999999999999998)

    # Call calc_max_distance() with valid arguments.
    def test_calc_max_distance_with_valid_arguments(self):
        observatory = Observatory(latitude=16266, longitude=6046, distance_minimal=100, distance_maximal=1000,
                                  start_angle=0, end_angle=180, fov_horizontal=90, fov_vertical=60, height=10,
                                  color=(255, 0, 0), thickness=2)

        max_distance = observatory.calc_max_distance()

        assert max_distance == pytest.approx(99.99999999999999)